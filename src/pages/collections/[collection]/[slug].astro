---
import Layout from "../../../layouts/Layout.astro";
import Navigation from "../../../components/home/Navigation.tsx";
import { getCollection, type CollectionEntry } from "astro:content";
import { getCollectionSlugs } from "../../../config/collections.js";
import { getCollectionConfig, CollectionError } from "../../../utils/collections.js";

// Type definitions for Astro props
type CollectionSlug = 'rag' | 'agents' | 'prompt-engineering' | 'python-packages';

interface Props {
  post: CollectionEntry<CollectionSlug>;
  collection: string;
}

export async function getStaticPaths() {
  try {
    const collectionSlugs = getCollectionSlugs();
    const paths: Array<{
      params: { collection: string; slug: string };
      props: Props;
    }> = [];

    for (const collection of collectionSlugs) {
      try {
        const posts = await getCollection(collection as any);
        const filteredPosts = posts.filter((post: any) => post.id !== "index");

        for (const post of filteredPosts) {
          paths.push({
            params: { collection, slug: (post as any).id },
            props: { post: post as any, collection },
          });
        }
      } catch (error) {
        // Skip collections that don't have content yet
        console.warn(`No content found for collection '${collection}':`, error);
      }
    }

    return paths;
  } catch (error) {
    console.error('Failed to generate static paths for post pages:', error);
    throw error;
  }
}

const { post, collection }: Props = Astro.props;

if (!post || !collection) {
  throw new Error(`Invalid props: post=${post}, collection=${collection}`);
}

let Content: any;
let collectionConfig: any;
let allPosts: any[] = [];
let posts: any[] = [];
let prevPost: any = null;
let nextPost: any = null;
let errorMessage: string | null = null;

try {
  // Render post content
  const renderResult = await post.render();
  Content = renderResult.Content;
} catch (error) {
  console.error(`Failed to render post '${post.id}' in collection '${collection}':`, error);
  throw new Error(`Failed to render post content: ${error instanceof Error ? error.message : String(error)}`);
}

try {
  // Get collection metadata from central configuration
  collectionConfig = getCollectionConfig(collection);
  
  try {
    // Get all posts in this collection for navigation
    allPosts = await getCollection(collection as any);
    posts = allPosts
      .filter((p: any) => p.id !== "index")
      .sort((a: any, b: any) => a.data.order - b.data.order);

    const currentIndex = posts.findIndex((p: any) => p.id === post.id);
    prevPost = currentIndex > 0 ? posts[currentIndex - 1] : null;
    nextPost = currentIndex < posts.length - 1 ? posts[currentIndex + 1] : null;
  } catch (error) {
    console.warn(`Failed to load navigation posts for collection '${collection}':`, error);
    // Continue without navigation
  }
} catch (error) {
  if (error instanceof CollectionError) {
    console.error(`Collection error for '${collection}':`, error);
    errorMessage = error.message;
  } else {
    console.error(`Unexpected error for collection '${collection}':`, error);
    errorMessage = `An unexpected error occurred while loading collection '${collection}'`;
  }
  
  // Use fallback metadata
  collectionConfig = {
    title: collection.charAt(0).toUpperCase() + collection.slice(1).replace(/-/g, ' '),
    slug: collection,
    description: `Content collection: ${collection}`,
    category: 'Unknown',
    color: '#666666',
    tags: [collection]
  };
}

const pageTitle = `${post.data.title} - ${collectionConfig.title}`;
---

<Layout title={pageTitle} description={post.data.description}>
  <div class="page-container">
    <Navigation client:load currentPath="/collections" />

    <main class="main-content">
      <header class="post-header-section">
        <div class="post-breadcrumb">
          <a href="/collections">Collections</a> →
          <a href={`/collections/${collection}`}>{collectionConfig.title}</a> →
          {post.data.title}
        </div>

        <div class="post-meta-header">
          <div class="post-number-badge">
            {String(post.data.order).padStart(2, "0")}
          </div>
          <div class="post-info">
            <h1 class="post-main-title">{post.data.title}</h1>
            <div class="post-meta-details">
              <span class="read-time">{post.data.readTime}</span>
              <span class="publish-date">
                {
                  post.data.publishDate.toLocaleDateString("en-US", {
                    year: "numeric",
                    month: "long",
                    day: "numeric",
                  })
                }
              </span>
              {
                post.data.lastUpdated && (
                  <span class="update-date">
                    Updated:{" "}
                    {post.data.lastUpdated.toLocaleDateString("en-US", {
                      year: "numeric",
                      month: "short",
                      day: "numeric",
                    })}
                  </span>
                )
              }
            </div>
          </div>
        </div>

        <p class="post-description-header">{post.data.description}</p>

        <div class="post-tags-header">
          {post.data.tags.map((tag: string) => <span class="tag">{tag}</span>)}
        </div>
        
        {errorMessage && (
          <div class="error-message" style="background: #fee; border: 1px solid #fcc; padding: 1rem; border-radius: 4px; margin-top: 1rem;">
            <p style="color: #c33; margin: 0;">⚠️ {errorMessage}</p>
          </div>
        )}
      </header>

      {
        post.data.prerequisites && post.data.prerequisites.length > 0 && (
          <section class="prerequisites-section">
            <h3>Prerequisites</h3>
            <div class="prerequisites-list">
              {post.data.prerequisites.map((prereq: string) => {
                const prereqPost = posts.find((p) => p.slug === prereq);
                return prereqPost ? (
                  <a
                    href={`/collections/${collection}/${prereq}`}
                    class="prerequisite-item"
                  >
                    <span class="prereq-number">
                      {String(prereqPost.data.order).padStart(2, "0")}
                    </span>
                    <span class="prereq-title">{prereqPost.data.title}</span>
                  </a>
                ) : (
                  <div class="prerequisite-item">
                    <span class="prereq-title">{prereq}</span>
                  </div>
                );
              })}
            </div>
          </section>
        )
      }

      <article class="post-content-section">
        <Content />
      </article>

      {
        post.data.authorProfile && (
          <section class="author-section">
            <h3>About the Author</h3>
            <div class="author-card">
              <div class="author-info">
                <h4>{post.data.author}</h4>
                <div class="author-links">
                  {post.data.authorProfile.github && (
                    <a
                      href={post.data.authorProfile.github}
                      target="_blank"
                      rel="noopener"
                    >
                      GitHub
                    </a>
                  )}
                  {post.data.authorProfile.linkedin && (
                    <a
                      href={post.data.authorProfile.linkedin}
                      target="_blank"
                      rel="noopener"
                    >
                      LinkedIn
                    </a>
                  )}
                  {post.data.authorProfile.twitter && (
                    <a
                      href={post.data.authorProfile.twitter}
                      target="_blank"
                      rel="noopener"
                    >
                      Twitter
                    </a>
                  )}
                  {post.data.authorProfile.website && (
                    <a
                      href={post.data.authorProfile.website}
                      target="_blank"
                      rel="noopener"
                    >
                      Website
                    </a>
                  )}
                </div>
              </div>
            </div>
          </section>
        )
      }

      <nav class="post-navigation">
        <div class="nav-links">
          {
            prevPost ? (
              <a
                href={`/collections/${collection}/${prevPost.id}`}
                class="nav-link prev"
              >
                <span class="nav-direction">← Previous</span>
                <span class="nav-title">{prevPost.data.title}</span>
              </a>
            ) : (
              <div class="nav-placeholder" />
            )
          }

          <a href={`/collections/${collection}`} class="nav-link collection">
            <span class="nav-direction">↑ Collection</span>
            <span class="nav-title">{collectionConfig.title}</span>
          </a>

          {
            nextPost ? (
              <a
                href={`/collections/${collection}/${nextPost.id}`}
                class="nav-link next"
              >
                <span class="nav-direction">Next →</span>
                <span class="nav-title">{nextPost.data.title}</span>
              </a>
            ) : (
              <div class="nav-placeholder" />
            )
          }
        </div>
      </nav>
    </main>

    <footer class="footer">
      <div class="footer-content">
        <p>
          &copy; 2025 AIEngineeringLog. Built with ❤️ by practitioners, for
          practitioners.
        </p>
      </div>
    </footer>
  </div>
</Layout>
